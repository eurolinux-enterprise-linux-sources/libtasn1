diff --git a/lib/element.c b/lib/element.c
index 4295246..b6c3596 100644
--- a/lib/element.c
+++ b/lib/element.c
@@ -113,9 +113,11 @@ _asn1_convert_integer (const char *value, unsigned char *value_out,
     /* VALUE_OUT is too short to contain the value conversion */
     return ASN1_MEM_ERROR;
 
-  for (k2 = k; k2 < SIZEOF_UNSIGNED_LONG_INT; k2++)
-    value_out[k2 - k] = val[k2];
-
+  if (value_out != NULL)
+    {
+      for (k2 = k; k2 < SIZEOF_UNSIGNED_LONG_INT; k2++)
+        value_out[k2 - k] = val[k2];
+    }
 #if 0
   printf ("_asn1_convert_integer: valueIn=%s, lenOut=%d", value, *len);
   for (k = 0; k < SIZEOF_UNSIGNED_LONG_INT; k++)
@@ -622,7 +624,7 @@ asn1_write_value (ASN1_TYPE node_root, const char *name,
 	*len = data_size; \
 	if (ptr_size < data_size) { \
 		return ASN1_MEM_ERROR; \
-	} else { \
+	} else if (ptr) { \
 		memcpy( ptr, data, data_size); \
 	}
 
@@ -630,19 +632,20 @@ asn1_write_value (ASN1_TYPE node_root, const char *name,
 	*len = strlen(data) + 1; \
 	if (ptr_size < *len) { \
 		return ASN1_MEM_ERROR; \
-	} else { \
+	} else if (ptr) { \
 		/* this strcpy is checked */ \
 		strcpy(ptr, data); \
 	}
 
 #define ADD_STR_VALUE( ptr, ptr_size, data) \
-	*len = (int) strlen(data) + 1; \
-	if (ptr_size < (int) strlen(ptr)+(*len)) { \
-		return ASN1_MEM_ERROR; \
-	} else { \
-		/* this strcat is checked */ \
-		strcat(ptr, data); \
-	}
+        *len += strlen(data); \
+        if (ptr_size < (int) *len) { \
+                (*len)++; \
+                return ASN1_MEM_ERROR; \
+        } else { \
+                /* this strcat is checked */ \
+                if (ptr) strcat (ptr, data); \
+        }
 
 /**
   * asn1_read_value - Returns the value of one element inside a structure
@@ -803,7 +806,9 @@ asn1_read_value (ASN1_TYPE root, const char *name, void *ivalue, int *len)
     case TYPE_OBJECT_ID:
       if (node->type & CONST_ASSIGN)
 	{
-	  value[0] = 0;
+	  *len = 0;
+	  if (value)
+	    value[0] = 0;
 	  p = node->down;
 	  while (p)
 	    {
@@ -817,7 +822,7 @@ asn1_read_value (ASN1_TYPE root, const char *name, void *ivalue, int *len)
 		}
 	      p = p->right;
 	    }
-	  *len = strlen (value) + 1;
+	  (*len)++;
 	}
       else if ((node->type & CONST_DEFAULT) && (node->value == NULL))
 	{
