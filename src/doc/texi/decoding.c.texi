@subheading asn1_get_length_der
@anchor{asn1_get_length_der}
@deftypefun {signed long} {asn1_get_length_der} (const unsigned char * @var{der}, int @var{der_len}, int * @var{len})
@var{der}: DER data to decode.

@var{der_len}: Length of DER data to decode.

@var{len}: Output variable containing the length of the DER length field.

Extract a length field from DER data.

@strong{Return value:} Return the decoded length value, or -1 on indefinite
length, or -2 when the value was too big.
@end deftypefun

@subheading asn1_get_tag_der
@anchor{asn1_get_tag_der}
@deftypefun {int} {asn1_get_tag_der} (const unsigned char * @var{der}, int @var{der_len}, unsigned char * @var{cls}, int * @var{len}, unsigned long * @var{tag})
@var{der}: DER data to decode.

@var{der_len}: Length of DER data to decode.

@var{cls}: Output variable containing decoded class.

@var{len}: Output variable containing the length of the DER TAG data.

@var{tag}: Output variable containing the decoded tag.

Decode the class and TAG from DER code.

@strong{Return value:} Returns ASN1_SUCCESS on success, or an error.
@end deftypefun

@subheading asn1_get_length_ber
@anchor{asn1_get_length_ber}
@deftypefun {signed long} {asn1_get_length_ber} (const unsigned char * @var{ber}, int @var{ber_len}, int * @var{len})
@var{ber}: BER data to decode.

@var{ber_len}: Length of BER data to decode.

@var{len}: Output variable containing the length of the BER length field.

Extract a length field from BER data.  The difference to
@code{asn1_get_length_der()} is that this function will return a length
even if the value has indefinite encoding.

@strong{Return value:} Return the decoded length value, or negative value
when the value was too big.

@strong{Since:} 2.0
@end deftypefun

@subheading asn1_get_octet_der
@anchor{asn1_get_octet_der}
@deftypefun {int} {asn1_get_octet_der} (const unsigned char * @var{der}, int @var{der_len}, int * @var{ret_len}, unsigned char * @var{str}, int @var{str_size}, int * @var{str_len})
@var{der}: DER data to decode containing the OCTET SEQUENCE.

@var{der_len}: Length of DER data to decode.

@var{ret_len}: Output variable containing the length of the DER data.

@var{str}: Pre-allocated output buffer to put decoded OCTET SEQUENCE in.

@var{str_size}: Length of pre-allocated output buffer.

@var{str_len}: Output variable containing the length of the OCTET SEQUENCE.

Extract an OCTET SEQUENCE from DER data.

@strong{Return value:} Returns ASN1_SUCCESS on success, or an error.
@end deftypefun

@subheading asn1_get_bit_der
@anchor{asn1_get_bit_der}
@deftypefun {int} {asn1_get_bit_der} (const unsigned char * @var{der}, int @var{der_len}, int * @var{ret_len}, unsigned char * @var{str}, int @var{str_size}, int * @var{bit_len})
@var{der}: DER data to decode containing the BIT SEQUENCE.

@var{der_len}: Length of DER data to decode.

@var{ret_len}: Output variable containing the length of the DER data.

@var{str}: Pre-allocated output buffer to put decoded BIT SEQUENCE in.

@var{str_size}: Length of pre-allocated output buffer.

@var{bit_len}: Output variable containing the size of the BIT SEQUENCE.

Extract a BIT SEQUENCE from DER data.

@strong{Return value:} Return ASN1_SUCCESS on success, or an error.
@end deftypefun

@subheading asn1_der_decoding
@anchor{asn1_der_decoding}
@deftypefun {asn1_retCode} {asn1_der_decoding} (ASN1_TYPE * @var{element}, const void * @var{ider}, int @var{len}, char * @var{errorDescription})
@var{element}: pointer to an ASN1 structure.

@var{ider}: vector that contains the DER encoding.

@var{len}: number of bytes of *@code{ider}: @code{ider}[0]..@code{ider}[len-1].

@var{errorDescription}: null-terminated string contains details when an
error occurred.

Fill the structure *ELEMENT with values of a DER encoding
string. The sructure must just be created with function
'create_stucture'.  If an error occurs during the decoding
procedure, the *ELEMENT is deleted and set equal to
@code{ASN1_TYPE_EMPTY}.

@strong{Returns:} 
@strong{ASN1_SUCCESS:} DER encoding OK.

@strong{ASN1_ELEMENT_NOT_FOUND:} ELEMENT is ASN1_TYPE_EMPTY.

ASN1_TAG_ERROR,ASN1_DER_ERROR: The der encoding doesn't match
the structure NAME. *ELEMENT deleted.
@end deftypefun

@subheading asn1_der_decoding_element
@anchor{asn1_der_decoding_element}
@deftypefun {asn1_retCode} {asn1_der_decoding_element} (ASN1_TYPE * @var{structure}, const char * @var{elementName}, const void * @var{ider}, int @var{len}, char * @var{errorDescription})
@var{structure}: pointer to an ASN1 structure

@var{elementName}: name of the element to fill

@var{ider}: vector that contains the DER encoding of the whole structure.

@var{len}: number of bytes of *der: der[0]..der[len-1]

@var{errorDescription}: null-terminated string contains details when an
error occurred.

Fill the element named ELEMENTNAME with values of a DER encoding
string.  The sructure must just be created with function
'create_stucture'.  The DER vector must contain the encoding
string of the whole STRUCTURE.  If an error occurs during the
decoding procedure, the *STRUCTURE is deleted and set equal to
@code{ASN1_TYPE_EMPTY}.

@strong{Returns:} 
@strong{ASN1_SUCCESS:} DER encoding OK.

@strong{ASN1_ELEMENT_NOT_FOUND:} ELEMENT is ASN1_TYPE_EMPTY or
elementName == NULL.

ASN1_TAG_ERROR,ASN1_DER_ERROR: The der encoding doesn't match
the structure STRUCTURE. *ELEMENT deleted.
@end deftypefun

@subheading asn1_der_decoding_startEnd
@anchor{asn1_der_decoding_startEnd}
@deftypefun {asn1_retCode} {asn1_der_decoding_startEnd} (ASN1_TYPE @var{element}, const void * @var{ider}, int @var{len}, const char * @var{name_element}, int * @var{start}, int * @var{end})
@var{element}: pointer to an ASN1 element

@var{ider}: vector that contains the DER encoding.

@var{len}: number of bytes of *@code{ider}: @code{ider}[0]..@code{ider}[len-1]

@var{name_element}: an element of NAME structure.

@var{start}: the position of the first byte of NAME_ELEMENT decoding
(@code{ider}[*start])

@var{end}: the position of the last byte of NAME_ELEMENT decoding
(@code{ider}[*end])

Find the start and end point of an element in a DER encoding
string. I mean that if you have a der encoding and you have
already used the function "asn1_der_decoding" to fill a structure,
it may happen that you want to find the piece of string concerning
an element of the structure.

@strong{Example:} the sequence "tbsCertificate" inside an X509 certificate.

@strong{Returns:} 
@strong{ASN1_SUCCESS:} DER encoding OK.

@strong{ASN1_ELEMENT_NOT_FOUND:} ELEMENT is ASN1_TYPE EMPTY or
NAME_ELEMENT is not a valid element.

ASN1_TAG_ERROR,ASN1_DER_ERROR: the der encoding doesn't match
the structure ELEMENT.
@end deftypefun

@subheading asn1_expand_any_defined_by
@anchor{asn1_expand_any_defined_by}
@deftypefun {asn1_retCode} {asn1_expand_any_defined_by} (ASN1_TYPE @var{definitions}, ASN1_TYPE * @var{element})
@var{definitions}: ASN1 definitions

@var{element}: pointer to an ASN1 structure

Expands every "ANY DEFINED BY" element of a structure created from
a DER decoding process (asn1_der_decoding function). The element ANY
must be defined by an OBJECT IDENTIFIER. The type used to expand
the element ANY is the first one following the definition of
the actual value of the OBJECT IDENTIFIER.

@strong{Returns:} 
@strong{ASN1_SUCCESS:} Substitution OK.

@strong{ASN1_ERROR_TYPE_ANY:} Some "ANY DEFINED BY" element couldn't be
expanded due to a problem in OBJECT_ID -> TYPE association.

other errors: Result of der decoding process.
@end deftypefun

@subheading asn1_expand_octet_string
@anchor{asn1_expand_octet_string}
@deftypefun {asn1_retCode} {asn1_expand_octet_string} (ASN1_TYPE @var{definitions}, ASN1_TYPE * @var{element}, const char * @var{octetName}, const char * @var{objectName})
@var{definitions}: ASN1 definitions

@var{element}: pointer to an ASN1 structure

@var{octetName}: name of the OCTECT STRING field to expand.

@var{objectName}: name of the OBJECT IDENTIFIER field to use to define
the type for expansion.

Expands an "OCTET STRING" element of a structure created from a
DER decoding process (asn1_der_decoding function). The type used
for expansion is the first one following the definition of the
actual value of the OBJECT IDENTIFIER indicated by OBJECTNAME.

@strong{Returns:} 
@strong{ASN1_SUCCESS:} Substitution OK.

@strong{ASN1_ELEMENT_NOT_FOUND:} OBJECTNAME or OCTETNAME are not correct.

@strong{ASN1_VALUE_NOT_VALID:} Wasn't possible to find the type to use
for expansion.

other errors: result of der decoding process.
@end deftypefun

